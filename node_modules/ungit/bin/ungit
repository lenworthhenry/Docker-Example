#!/usr/bin/env node
var startLaunchTime = Date.now();
var forever = require('forever-monitor');
var config = require('../source/config')();
var open = require('open');
var path = require('path');
var child_process = require('child_process');
var semver = require('semver');
var superagent = require('superagent');
var async = require('async');
var version = require('../source/version');

if (config.bugtracking) var bugsense = require('../source/bugsense');
if (config.sendUsageStatistics) var usageStatistics = require('../source/usage-statistics');

process.on('uncaughtException', function(err) {
	console.error(err.stack.toString());
	var tasks = [];
	if (bugsense) tasks.push(function(done) { bugsense.notify(err, 'ungit-launcher', done); });
	if (usageStatistics) tasks.push(function(done) { usageStatistics.addEvent('launcher-exception', { version: version.currentVersion }, done); })
	async.parallel(tasks, function() {
		process.exit();
	});
});

version.getVersion(function(err, ungitVersion) {

	console.log('Ungit version ' + ungitVersion);

	if (bugsense) bugsense.setVersion(ungitVersion);

	var child = new (forever.Monitor)(path.join(__dirname, '..', 'source', 'server.js'), {
		silent: false,
		minUptime: 2000,
		max: config.maxNAutoRestartOnCrash,
		cwd: path.join(process.cwd(), '..'),
		options: process.argv.slice(2),
		env: { LANG: 'en_US', LC_ALL: 'C' }
	});

	child.on('exit', function (res) {
		console.log('Stopped keeping ungit alive');
	});

	function launchBrowser() {
		var currentUrl = 'http://localhost:' + config.port;
		if (config.forcedLaunchPath === undefined) currentUrl += '/#/repository?path=' + encodeURIComponent(process.cwd());
		else if (config.forcedLaunchPath !== null && config.forcedLaunchPath !== '') currentUrl += '/#/repository?path=' + encodeURIComponent(config.forcedLaunchPath);
		console.log('Browse to ' + currentUrl);
		if (config.launchBrowser)
			open(currentUrl);
	}

	function startupListener(data) {
		if (data.toString().indexOf('## Ungit started ##') >= 0) {
			launchBrowser();
			child.removeListener('stdout', startupListener);
			var launchTime = (Date.now() - startLaunchTime);
			console.log('Took ' + launchTime + 'ms to start server.');
			if (usageStatistics)
				usageStatistics.addEvent('server-start', { version: ungitVersion, launchTimeMs: launchTime });
		}
	}

	child.on('stdout', startupListener);

	function verifyGitVersion(callback) {
		child_process.exec('git --version', function(err, stdout, stderr) {

			if (err) {
				callback('Can\'t run "git --version". Is git installed and available in your path?');
			} else {
				var version = /.*(\d+[.]\d+[.]\d+).*/.exec(stdout)[1];
				var requiredVersion = '>=1.8.x';
				if (!semver.satisfies(version, requiredVersion)) {
					callback('Ungit requires git version ' + requiredVersion + ', you are currently running ' + version);
				} else {
					callback();
				}
			}

		});
	}

	var http = require('http');
	function checkIfUngitIsRunning(callback) {
		// Fastest way to find out if a port is used or not/i.e. if ungit is running
		var net = require('net');
		var server = net.createServer(function(c) { });
		server.listen(config.port, function(err) {
			server.close(function() {
				callback(null, false);
			});
		});
		server.on('error', function (e) {
		  if (e.code == 'EADDRINUSE') {
		    callback(null, true);
		  }
		});
	}

	checkIfUngitIsRunning(function(err1, ungitRunning) {
		if (ungitRunning) {
			console.log('Ungit server already running');
			launchBrowser();
		}
		else {
			verifyGitVersion(function(err) {
				if (err) console.log(err);
				else child.start();
			});
		}
	});

});